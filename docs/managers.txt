.. _managers:

========
Managers
========

.. module:: towel.managers


:class:`~towel.managers.SearchManager`
======================================

This manager helps you build a simple search facility in the absence
of a full-blown full text search solution such as Apache Solr or similar
products.

:class:`~towel.managers.SearchManager` supports queries with multiple clauses;
terms may be grouped using apostrophes, plus and minus signs may be optionally
prepended to the terms to determine whether the given term should be included
or not. Example::

    +Django "Shop software" -Satchmo


To use the :class:`~towel.managers.SearchManager` in your own software,
simply subclass it and provide a definition for ``search_fields``::

    from django.db import models
    from towel.managers import SearchManager

    class Author(models.Model):
        name = models.CharField(max_length=100)

    class BookManager(SearchManager):
        search_fields = ('author__name', 'title')

    class Book(models.Model):
        author = models.ForeignKey(Author)
        title = models.CharField(max_length=100)
        year = models.IntegerField()

        objects = BookManager()


Please note that you can search fields from other models too. You should
be careful when traversing many-to-many relations however, because you will
get duplicated results if you do not call ``.distinct()`` on the resulting
queryset.

The method ``def _search(self, query)`` does the heavy lifting when
constructing a queryset. You should not need to override this method. If you
want to customize the results further, f.e. apply a site-wide limit for the
objects a certain logged in user may see, you should override
``def search(self, query)``. The default :class:`~towel.modelview.ModelView`
implementation assumes this method signature, but you may of course modify it
freely if you want to use this manager with other or modified code. The default
implementation of ``def search(self, query)`` simply calls
``def _search(self, query)``.

